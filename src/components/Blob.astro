---
/*
The Blob component is used to place the images in `public/images/blobs`.

@param {BlobKind} kind - A string describing the name of the blob that should be
  placed. For example, for `blob-grad-dots-02.svg`, this should be
  `grad-dots-02`.
@param {string} top - The CSS `top` value for this blob.
@param {string} left - The CSS `left` value for this blob.
@param {string} right - The CSS `right` value for this blob.

There are three main suggested ways to use Blobs.

1. If the Blob should not be anchored to a specific element on the page, but
  rather should be absolutely positioned somewhere around the content:
  1. Place the Blob in a `<div class="container">`, presumably the main one used
    for the page.
  2. Give the Blob an approximate vertical position using a percentage value
    such as `top="20%"`.
  3. Give the Blob a `left` or `right` horizontal offset from the container,
    using e.g. `right: -12rem`.
2. If the Blob should be anchored to a target element on the page:
  1. Wrap both the target element and the Blob in a `position: relative`
    element.
  2. Give the Blob an appropriate `top` and `left`/`right` position.
3. If the Blob should be anchored to the edge of the screen:
  1. Put the Blob outside of any `position: relative` container other than
    `<html>`, and give it an appropriate `top` and `left`/`right` position.
  2. Wrap all such Blobs in a `div` with `class="edge-blobs"`, so that they're
    only shown on large screens.

“grad” blobs have a higher z-index than “solid” blobs.
*/

type BlobKind =
  "grad-dots-01" |
  "grad-dots-02" |
  "grad-dots-03" |
  "grad-dots-04" |
  "grad-dots-05" |
  "grad-dots-06" |
  "solid-fill-01" |
  "solid-fill-02" |
  "solid-fill-03" |
  "solid-fill-04" |
  "solid-fill-05";

interface Props {
  top?: string;
  left?: string;
  right?: string;
  kind: BlobKind;
}

const kind = Astro.props.kind;
const top = Astro.props.top || "auto";
const left = Astro.props.left || "auto";
const right = Astro.props.right || "auto";
const isGrad = kind.includes("grad");
const blobGenre = isGrad ? "grad" : "solid";
const zIndex = isGrad ? 100 : 90;

const { default: svg } = await import (`../assets/images/blobs/blob-${kind}.svg?raw`);
---
<div class="blob" data-blob={blobGenre}>
  <Fragment set:html={svg} />
</div>

<style define:vars={{ top, left, right, zIndex }}>
  .blob :global(svg) {
    position: absolute;
    top: var(--top);
    left: var(--left);
    right: var(--right);
    z-index: var(--zIndex);
  }
</style>

<script>
  // NOTE: Keep in mind that this code will be bundled out by Astro, meaning it
  // will only run once total, as it should, not once per <Blob>, as it
  // shouldn't.
  const clientHasMouse = window.matchMedia("(any-hover: hover)").matches;
  if (clientHasMouse) {
    const $gradBlobs = document.querySelectorAll("[data-blob='grad'] svg");
    document.addEventListener("mousemove", function(e) {
      const mousePos = {
        x: e.pageX,
        y: e.pageY
      };
      $gradBlobs.forEach(($blob) => {
        const blobRect = $blob.getBoundingClientRect();
        const blobCenter = {
          x: window.scrollX + blobRect.left + blobRect.width / 2,
          y: window.scrollY + blobRect.top + blobRect.height / 2,
        }
        const $grad = $blob.querySelector('linearGradient');
        if (!$grad) {
          console.error('Could not get $grad for blob.');
          return;
        }
        const angle = Math.atan2(blobCenter.y - mousePos.y, blobCenter.x - mousePos.x);
        const angleDeg = angle * 180 / Math.PI;
        const $mask = $blob.querySelector('mask');
        if (!$mask) {
          console.error('Could not get $mask for blob.');
          return;
        }
        const maskWidth = $mask.getAttribute('width');
        const maskHeight = $mask.getAttribute('height');
        if (!maskWidth || !maskHeight) {
          console.error('Could not get $mask dimensions for blob.');
          return;
        }
        const rx = +maskWidth / 2;
        const ry = +maskHeight / 2;
        $grad.setAttribute('gradientTransform', `rotate(${angleDeg} ${rx} ${ry})`);
      });
    });
  }
</script>
